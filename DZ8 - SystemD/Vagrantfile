# -*- mode: ruby -*-
# vim: set ft=ruby :
home = ENV['HOME']
ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :legasov => {
        :box_name => "centos/7",
        :ip_addr => '192.168.56.156',
  }
}

Vagrant.configure("2") do |config|
  
  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

          box.vm.box = boxconfig[:box_name]
          box.vm.host_name = boxname.to_s

          box.vm.network "private_network", ip: boxconfig[:ip_addr]

          box.vm.provider :virtualbox do |vb|
            vb.customize ["modifyvm", :id, "--memory", "200"]
          end
          
          box.vm.provision "shell", inline: <<-SHELL

          echo -e "\nЗадание 1. Написать service, который будет раз в 30 секунд мониторить лог на предмет наличия ключевого слова"
          echo "Файл лога и ключевое слово должны задаваться в /etc/sysconfig."
          echo "\nСоздадим файл настроек /etc/sysconfig/monitoring..."
          touch /etc/sysconfig/monitoring
          echo -e "LOGFILE=/var/log/messages\nKEYWORD=systemd" >> /etc/sysconfig/monitoring

          echo "\nСоздадим скрипт поиска ключегово слова в логах..."
          touch /opt/watchlog.sh
          chmod 774 /opt/watchlog.sh
          cat <<'EOF1_0' >/opt/watchlog.sh
#!/bin/bash
KEYWORD=$1
LOGFILE=$2
DATE=`date`
if grep $KEYWORD $LOGFILE &> /dev/null
then
logger "$DATE: I found word, Master!"
else
exit 0
fi
EOF1_0

          echo "\nСоздадим файл таймера..."
          touch /etc/systemd/system/monitoring.timer
          chmod 664 /etc/systemd/system/monitoring.timer
          cat <<'EOF1_1' >/etc/systemd/system/monitoring.timer
          [Unit]
          Description=monitoring timer
          After=syslog.target

          [Timer]
          OnBootSec=0sec
          OnUnitActiveSec=30sec
          [Install]
          WantedBy=timers.target.target
EOF1_1
          echo -e "\nСоздадим файл сервиса..."
          touch /etc/systemd/system/monitoring.service
          chmod 664 /etc/systemd/system/monitoring.service
          cat <<'EOF1_2' >/etc/systemd/system/monitoring.service
          [Unit]
          Description=monitoring service
          After=syslog.target

          [Service]
          User=root
          Type=oneshot
          EnvironmentFile=/etc/sysconfig/monitoring
          ExecStart=/opt/watchlog.sh $KEYWORD $LOGFILE
          [Install]
          WantedBy=timers.target.target
EOF1_2

          echo "Запускаем таймер..."
          systemctl daemon-reload
          systemctl start monitoring.timer
          echo -e "\nДоводим все до ума..."
          sleep 30
          echo -e "\nПроверим работу таймера..."
          systemctl list-timers | grep monitoring.timer
          echo -e "\nПроверим работу сервиса..."
          systemctl status monitoring.service
          echo -e "\nПроверим журнал"
          tail /var/log/messages
          echo "\nЗадание 1 выполнено.\n\n"
          sleep 10

          echo -e "\nЗадание 2. Из репозитория epel установить spawn-fcgi и переписать init-скрипт на unit-файл"
          echo "Установим необходимый софт..."
          yum install -y -q epel-release > /dev/null 2>&1
          yum install -y -q spawn-fcgi php-cli httpd > /dev/null 2>&1
          echo "Добавим Настройки spawn-fcgi..."
          echo "OPTIONS=-u apache -g apache -s /var/run/spawn-fcgi/php-fcgi.sock -S -M 0600 -C 32 -F 1 -P /var/run/spawn-fcgi/spawn-fcgi.pid -- /usr/bin/php-cgi" >> /etc/sysconfig/spawn-fcgi
          echo "Создаем unit-файл для spawn-fcgi..."
          touch /etc/systemd/system/spawn-fcgi.service
          chmod 664 /etc/systemd/system/spawn-fcgi.service
          cat <<'EOF2' >/etc/systemd/system/spawn-fcgi.service
          [Unit]
          Description=spawn-fcgi
          After=syslog.target

          [Service]
          Type=forking
          User=apache
          Group=apache
          EnvironmentFile=/etc/sysconfig/spawn-fcgi
          PIDFile=/var/run/spawn-fcgi/spawn-fcgi.pid
          RuntimeDirectory=spawn-fcgi
          ExecStart=/usr/bin/spawn-fcgi $OPTIONS
          ExecStop=

          [Install]
          WantedBy=multi-user.target
EOF2
          systemctl daemon-reload
          systemctl enable --now spawn-fcgi.service > /dev/null 2>&1
          echo -e "\nПроверим статус сервиса spawn-fcgi"
          systemctl status spawn-fcgi.service
          echo -e "\nЗадание 2 выполнено\n\n"
          sleep 10
          echo -e "\nЗадание 3. Дополнить unit-файл httpd (он же apache) возможностью запустить несколько инстансов сервера с разными конфигурационными файлами"
          echo "Установим необходимый софт и настроим selinux..."
          yum install -y -q policycoreutils-python
          semanage port -m -t http_port_t -p tcp 8081
          semanage port -m -t http_port_t -p tcp 8082
          echo "Скопируем и изменим файл сервиса httpd.service в шаблон"
          cp /usr/lib/systemd/system/httpd.service /etc/systemd/system/httpd@.service
          sed -i 's*EnvironmentFile=/etc/sysconfig/httpd*EnvironmentFile=/etc/sysconfig/%i*' /etc/systemd/system/httpd@.service

          echo "Скопируем и изменим файлы настройки сервиса httpd.service"
          cp /etc/sysconfig/httpd /etc/sysconfig/conf1
          cp /etc/sysconfig/httpd /etc/sysconfig/conf2
          sed -i 's*#OPTIONS=*OPTIONS=-f /etc/httpd/conf/httpd1.conf*' /etc/sysconfig/conf1
          sed -i 's*#OPTIONS=*OPTIONS=-f /etc/httpd/conf/httpd2.conf*' /etc/sysconfig/conf2
          echo "Скопируем и изменим файлы настройки демона httpd"
          cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd1.conf
          cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd2.conf
          sed -i 's/Listen 80/Listen 8081/' /etc/httpd/conf/httpd1.conf
          sed -i 's/Listen 80/Listen 8082/' /etc/httpd/conf/httpd2.conf
          echo "PidFile /var/run/httpd/httpd1.pid" >> /etc/httpd/conf/httpd1.conf
          echo "PidFile /var/run/httpd/httpd2.pid" >> /etc/httpd/conf/httpd2.conf

          systemctl daemon-reload
          systemctl enable --now httpd@conf1.service > /dev/null 2>&1
          systemctl enable --now httpd@conf2.service > /dev/null 2>&1
          echo -e "\nПроверим статусы сервисов"
          systemctl status httpd@conf1.service
          systemctl status httpd@conf2.service
          echo -e "\nПроверим порты"
          ss -tunlp | grep httpd
          echo -e "\nЗадание 3 выполнено\n\n"
          sleep 10
          echo -e "\nСпасибо за проверку!"

          SHELL

        end
    end
  end